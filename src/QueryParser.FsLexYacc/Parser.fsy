%{

open Ast

open System
let trimQuotes (s:string) = s.Trim([|'"'|])

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <System.String> WORD
%token <System.String> PHRASE
%token QUESTION ANSWER
%token AND OR NOT
%token LPAREN RPAREN SEMI
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Ast.SearchQuery > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.
start: Prog { SearchQuery($1) }

Prog:
    | Expr2 EOF					{ $1 }

Expr2: 
    | Expr2 AND Expr1			{ And($1, $3) }
    | Expr2 Expr1				{ And($1, $2)}
    | Expr2 OR Expr1			{ Or($1, $3) }
    | Expr1						{ Expr1($1) }

Expr1:
    | NOT Expr1					{ Not($2) }
    | LPAREN Expr2 RPAREN		{ ParenEx($2) }
    | Condition					{ Condition($1) }

Condition:
    | Field SEMI Term			{ FieldQuery($1, $3) }
    | Term						{ Query($1) }

Field:
    | QUESTION					{ QuestionField }
    | ANSWER					{ AnswerField }

Term:
    | WORD						{ Word($1) }
    | PHRASE					{ Phrase(trimQuotes($1)) }